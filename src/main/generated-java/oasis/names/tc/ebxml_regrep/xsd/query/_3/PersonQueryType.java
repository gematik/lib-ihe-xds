/*-
 * #%L
 * lib-ihe-xds
 * %%
 * Copyright (C) 2023 - 2025 gematik GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * *******
 * 
 * For additional notes and disclaimer from gematik and in case of changes by gematik find details in the "Readme" file.
 * #L%
 */
//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.07.11 at 06:21:54 PM CEST 
//


package oasis.names.tc.ebxml_regrep.xsd.query._3;


import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;


/**
 * <p>Java class for PersonQueryType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PersonQueryType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}RegistryObjectQueryType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="AddressFilter" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}FilterType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="PersonNameFilter" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}FilterType" minOccurs="0"/&gt;
 *         &lt;element name="TelephoneNumberFilter" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}FilterType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="EmailAddressFilter" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}FilterType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PersonQueryType", propOrder = {
    "addressFilter",
    "personNameFilter",
    "telephoneNumberFilter",
    "emailAddressFilter"
})
@XmlSeeAlso({
    UserQueryType.class
})
public class PersonQueryType
    extends RegistryObjectQueryType
{

    @XmlElement(name = "AddressFilter")
    protected List<FilterType> addressFilter;
    @XmlElement(name = "PersonNameFilter")
    protected FilterType personNameFilter;
    @XmlElement(name = "TelephoneNumberFilter")
    protected List<FilterType> telephoneNumberFilter;
    @XmlElement(name = "EmailAddressFilter")
    protected List<FilterType> emailAddressFilter;

    /**
     * Gets the value of the addressFilter property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the addressFilter property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddressFilter().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FilterType }
     * 
     * 
     */
    public List<FilterType> getAddressFilter() {
        if (addressFilter == null) {
            addressFilter = new ArrayList<FilterType>();
        }
        return this.addressFilter;
    }

    /**
     * Gets the value of the personNameFilter property.
     * 
     * @return
     *     possible object is
     *     {@link FilterType }
     *     
     */
    public FilterType getPersonNameFilter() {
        return personNameFilter;
    }

    /**
     * Sets the value of the personNameFilter property.
     * 
     * @param value
     *     allowed object is
     *     {@link FilterType }
     *     
     */
    public void setPersonNameFilter(FilterType value) {
        this.personNameFilter = value;
    }

    /**
     * Gets the value of the telephoneNumberFilter property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the telephoneNumberFilter property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTelephoneNumberFilter().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FilterType }
     * 
     * 
     */
    public List<FilterType> getTelephoneNumberFilter() {
        if (telephoneNumberFilter == null) {
            telephoneNumberFilter = new ArrayList<FilterType>();
        }
        return this.telephoneNumberFilter;
    }

    /**
     * Gets the value of the emailAddressFilter property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the emailAddressFilter property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEmailAddressFilter().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FilterType }
     * 
     * 
     */
    public List<FilterType> getEmailAddressFilter() {
        if (emailAddressFilter == null) {
            emailAddressFilter = new ArrayList<FilterType>();
        }
        return this.emailAddressFilter;
    }

    public PersonQueryType withAddressFilter(FilterType... values) {
        if (values!= null) {
            for (FilterType value: values) {
                getAddressFilter().add(value);
            }
        }
        return this;
    }

    public PersonQueryType withAddressFilter(Collection<FilterType> values) {
        if (values!= null) {
            getAddressFilter().addAll(values);
        }
        return this;
    }

    public PersonQueryType withPersonNameFilter(FilterType value) {
        setPersonNameFilter(value);
        return this;
    }

    public PersonQueryType withTelephoneNumberFilter(FilterType... values) {
        if (values!= null) {
            for (FilterType value: values) {
                getTelephoneNumberFilter().add(value);
            }
        }
        return this;
    }

    public PersonQueryType withTelephoneNumberFilter(Collection<FilterType> values) {
        if (values!= null) {
            getTelephoneNumberFilter().addAll(values);
        }
        return this;
    }

    public PersonQueryType withEmailAddressFilter(FilterType... values) {
        if (values!= null) {
            for (FilterType value: values) {
                getEmailAddressFilter().add(value);
            }
        }
        return this;
    }

    public PersonQueryType withEmailAddressFilter(Collection<FilterType> values) {
        if (values!= null) {
            getEmailAddressFilter().addAll(values);
        }
        return this;
    }

    @Override
    public PersonQueryType withSlotBranch(SlotBranchType... values) {
        if (values!= null) {
            for (SlotBranchType value: values) {
                getSlotBranch().add(value);
            }
        }
        return this;
    }

    @Override
    public PersonQueryType withSlotBranch(Collection<SlotBranchType> values) {
        if (values!= null) {
            getSlotBranch().addAll(values);
        }
        return this;
    }

    @Override
    public PersonQueryType withNameBranch(InternationalStringBranchType value) {
        setNameBranch(value);
        return this;
    }

    @Override
    public PersonQueryType withDescriptionBranch(InternationalStringBranchType value) {
        setDescriptionBranch(value);
        return this;
    }

    @Override
    public PersonQueryType withVersionInfoFilter(FilterType value) {
        setVersionInfoFilter(value);
        return this;
    }

    @Override
    public PersonQueryType withClassificationQuery(ClassificationQueryType... values) {
        if (values!= null) {
            for (ClassificationQueryType value: values) {
                getClassificationQuery().add(value);
            }
        }
        return this;
    }

    @Override
    public PersonQueryType withClassificationQuery(Collection<ClassificationQueryType> values) {
        if (values!= null) {
            getClassificationQuery().addAll(values);
        }
        return this;
    }

    @Override
    public PersonQueryType withExternalIdentifierQuery(ExternalIdentifierQueryType... values) {
        if (values!= null) {
            for (ExternalIdentifierQueryType value: values) {
                getExternalIdentifierQuery().add(value);
            }
        }
        return this;
    }

    @Override
    public PersonQueryType withExternalIdentifierQuery(Collection<ExternalIdentifierQueryType> values) {
        if (values!= null) {
            getExternalIdentifierQuery().addAll(values);
        }
        return this;
    }

    @Override
    public PersonQueryType withObjectTypeQuery(ClassificationNodeQueryType value) {
        setObjectTypeQuery(value);
        return this;
    }

    @Override
    public PersonQueryType withStatusQuery(ClassificationNodeQueryType value) {
        setStatusQuery(value);
        return this;
    }

    @Override
    public PersonQueryType withSourceAssociationQuery(AssociationQueryType... values) {
        if (values!= null) {
            for (AssociationQueryType value: values) {
                getSourceAssociationQuery().add(value);
            }
        }
        return this;
    }

    @Override
    public PersonQueryType withSourceAssociationQuery(Collection<AssociationQueryType> values) {
        if (values!= null) {
            getSourceAssociationQuery().addAll(values);
        }
        return this;
    }

    @Override
    public PersonQueryType withTargetAssociationQuery(AssociationQueryType... values) {
        if (values!= null) {
            for (AssociationQueryType value: values) {
                getTargetAssociationQuery().add(value);
            }
        }
        return this;
    }

    @Override
    public PersonQueryType withTargetAssociationQuery(Collection<AssociationQueryType> values) {
        if (values!= null) {
            getTargetAssociationQuery().addAll(values);
        }
        return this;
    }

    @Override
    public PersonQueryType withPrimaryFilter(FilterType value) {
        setPrimaryFilter(value);
        return this;
    }

    @Override
    public boolean equals(Object object) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(object)) {
            return false;
        }
        final PersonQueryType that = ((PersonQueryType) object);
        {
            List<FilterType> leftAddressFilter;
            leftAddressFilter = (((this.addressFilter!= null)&&(!this.addressFilter.isEmpty()))?this.getAddressFilter():null);
            List<FilterType> rightAddressFilter;
            rightAddressFilter = (((that.addressFilter!= null)&&(!that.addressFilter.isEmpty()))?that.getAddressFilter():null);
            if ((this.addressFilter!= null)&&(!this.addressFilter.isEmpty())) {
                if ((that.addressFilter!= null)&&(!that.addressFilter.isEmpty())) {
                    if (!leftAddressFilter.equals(rightAddressFilter)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.addressFilter!= null)&&(!that.addressFilter.isEmpty())) {
                    return false;
                }
            }
        }
        {
            FilterType leftPersonNameFilter;
            leftPersonNameFilter = this.getPersonNameFilter();
            FilterType rightPersonNameFilter;
            rightPersonNameFilter = that.getPersonNameFilter();
            if (this.personNameFilter!= null) {
                if (that.personNameFilter!= null) {
                    if (!leftPersonNameFilter.equals(rightPersonNameFilter)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.personNameFilter!= null) {
                    return false;
                }
            }
        }
        {
            List<FilterType> leftTelephoneNumberFilter;
            leftTelephoneNumberFilter = (((this.telephoneNumberFilter!= null)&&(!this.telephoneNumberFilter.isEmpty()))?this.getTelephoneNumberFilter():null);
            List<FilterType> rightTelephoneNumberFilter;
            rightTelephoneNumberFilter = (((that.telephoneNumberFilter!= null)&&(!that.telephoneNumberFilter.isEmpty()))?that.getTelephoneNumberFilter():null);
            if ((this.telephoneNumberFilter!= null)&&(!this.telephoneNumberFilter.isEmpty())) {
                if ((that.telephoneNumberFilter!= null)&&(!that.telephoneNumberFilter.isEmpty())) {
                    if (!leftTelephoneNumberFilter.equals(rightTelephoneNumberFilter)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.telephoneNumberFilter!= null)&&(!that.telephoneNumberFilter.isEmpty())) {
                    return false;
                }
            }
        }
        {
            List<FilterType> leftEmailAddressFilter;
            leftEmailAddressFilter = (((this.emailAddressFilter!= null)&&(!this.emailAddressFilter.isEmpty()))?this.getEmailAddressFilter():null);
            List<FilterType> rightEmailAddressFilter;
            rightEmailAddressFilter = (((that.emailAddressFilter!= null)&&(!that.emailAddressFilter.isEmpty()))?that.getEmailAddressFilter():null);
            if ((this.emailAddressFilter!= null)&&(!this.emailAddressFilter.isEmpty())) {
                if ((that.emailAddressFilter!= null)&&(!that.emailAddressFilter.isEmpty())) {
                    if (!leftEmailAddressFilter.equals(rightEmailAddressFilter)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.emailAddressFilter!= null)&&(!that.emailAddressFilter.isEmpty())) {
                    return false;
                }
            }
        }
        return true;
    }

    @Override
    public int hashCode() {
        int currentHashCode = 1;
        currentHashCode = ((currentHashCode* 31)+ super.hashCode());
        {
            currentHashCode = (currentHashCode* 31);
            List<FilterType> theAddressFilter;
            theAddressFilter = (((this.addressFilter!= null)&&(!this.addressFilter.isEmpty()))?this.getAddressFilter():null);
            if ((this.addressFilter!= null)&&(!this.addressFilter.isEmpty())) {
                currentHashCode += theAddressFilter.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            FilterType thePersonNameFilter;
            thePersonNameFilter = this.getPersonNameFilter();
            if (this.personNameFilter!= null) {
                currentHashCode += thePersonNameFilter.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            List<FilterType> theTelephoneNumberFilter;
            theTelephoneNumberFilter = (((this.telephoneNumberFilter!= null)&&(!this.telephoneNumberFilter.isEmpty()))?this.getTelephoneNumberFilter():null);
            if ((this.telephoneNumberFilter!= null)&&(!this.telephoneNumberFilter.isEmpty())) {
                currentHashCode += theTelephoneNumberFilter.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            List<FilterType> theEmailAddressFilter;
            theEmailAddressFilter = (((this.emailAddressFilter!= null)&&(!this.emailAddressFilter.isEmpty()))?this.getEmailAddressFilter():null);
            if ((this.emailAddressFilter!= null)&&(!this.emailAddressFilter.isEmpty())) {
                currentHashCode += theEmailAddressFilter.hashCode();
            }
        }
        return currentHashCode;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
    }

}
