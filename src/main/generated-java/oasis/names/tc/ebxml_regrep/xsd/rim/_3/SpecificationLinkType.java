/*
 * Copyright 2023 gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.07.11 at 06:21:54 PM CEST 
//


package oasis.names.tc.ebxml_regrep.xsd.rim._3;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;


/**
 * <p>Java class for SpecificationLinkType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SpecificationLinkType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}RegistryObjectType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}UsageDescription" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}UsageParameter" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="serviceBinding" use="required" type="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}referenceURI" /&gt;
 *       &lt;attribute name="specificationObject" use="required" type="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}referenceURI" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SpecificationLinkType", propOrder = {
    "usageDescription",
    "usageParameter"
})
public class SpecificationLinkType
    extends RegistryObjectType
{

    @XmlElement(name = "UsageDescription")
    protected InternationalStringType usageDescription;
    @XmlElement(name = "UsageParameter")
    protected List<String> usageParameter;
    @XmlAttribute(name = "serviceBinding", required = true)
    protected String serviceBinding;
    @XmlAttribute(name = "specificationObject", required = true)
    protected String specificationObject;

    /**
     * Gets the value of the usageDescription property.
     * 
     * @return
     *     possible object is
     *     {@link oasis.names.tc.ebxml_regrep.xsd.rim._3.InternationalStringType }
     *     
     */
    public InternationalStringType getUsageDescription() {
        return usageDescription;
    }

    /**
     * Sets the value of the usageDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link oasis.names.tc.ebxml_regrep.xsd.rim._3.InternationalStringType }
     *     
     */
    public void setUsageDescription(InternationalStringType value) {
        this.usageDescription = value;
    }

    /**
     * Gets the value of the usageParameter property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the usageParameter property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUsageParameter().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getUsageParameter() {
        if (usageParameter == null) {
            usageParameter = new ArrayList<String>();
        }
        return this.usageParameter;
    }

    /**
     * Gets the value of the serviceBinding property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getServiceBinding() {
        return serviceBinding;
    }

    /**
     * Sets the value of the serviceBinding property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setServiceBinding(String value) {
        this.serviceBinding = value;
    }

    /**
     * Gets the value of the specificationObject property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSpecificationObject() {
        return specificationObject;
    }

    /**
     * Sets the value of the specificationObject property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSpecificationObject(String value) {
        this.specificationObject = value;
    }

    public SpecificationLinkType withUsageDescription(InternationalStringType value) {
        setUsageDescription(value);
        return this;
    }

    public SpecificationLinkType withUsageParameter(String... values) {
        if (values!= null) {
            for (String value: values) {
                getUsageParameter().add(value);
            }
        }
        return this;
    }

    public SpecificationLinkType withUsageParameter(Collection<String> values) {
        if (values!= null) {
            getUsageParameter().addAll(values);
        }
        return this;
    }

    public SpecificationLinkType withServiceBinding(String value) {
        setServiceBinding(value);
        return this;
    }

    public SpecificationLinkType withSpecificationObject(String value) {
        setSpecificationObject(value);
        return this;
    }

    @Override
    public SpecificationLinkType withName(InternationalStringType value) {
        setName(value);
        return this;
    }

    @Override
    public SpecificationLinkType withDescription(InternationalStringType value) {
        setDescription(value);
        return this;
    }

    @Override
    public SpecificationLinkType withVersionInfo(VersionInfoType value) {
        setVersionInfo(value);
        return this;
    }

    @Override
    public SpecificationLinkType withClassification(ClassificationType... values) {
        if (values!= null) {
            for (ClassificationType value: values) {
                getClassification().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecificationLinkType withClassification(Collection<ClassificationType> values) {
        if (values!= null) {
            getClassification().addAll(values);
        }
        return this;
    }

    @Override
    public SpecificationLinkType withExternalIdentifier(ExternalIdentifierType... values) {
        if (values!= null) {
            for (ExternalIdentifierType value: values) {
                getExternalIdentifier().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecificationLinkType withExternalIdentifier(Collection<ExternalIdentifierType> values) {
        if (values!= null) {
            getExternalIdentifier().addAll(values);
        }
        return this;
    }

    @Override
    public SpecificationLinkType withLid(String value) {
        setLid(value);
        return this;
    }

    @Override
    public SpecificationLinkType withObjectType(String value) {
        setObjectType(value);
        return this;
    }

    @Override
    public SpecificationLinkType withStatus(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public SpecificationLinkType withSlot(SlotType1 ... values) {
        if (values!= null) {
            for (SlotType1 value: values) {
                getSlot().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecificationLinkType withSlot(Collection<SlotType1> values) {
        if (values!= null) {
            getSlot().addAll(values);
        }
        return this;
    }

    @Override
    public SpecificationLinkType withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public SpecificationLinkType withHome(String value) {
        setHome(value);
        return this;
    }

    @Override
    public boolean equals(Object object) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(object)) {
            return false;
        }
        final SpecificationLinkType that = ((SpecificationLinkType) object);
        {
            InternationalStringType leftUsageDescription;
            leftUsageDescription = this.getUsageDescription();
            InternationalStringType rightUsageDescription;
            rightUsageDescription = that.getUsageDescription();
            if (this.usageDescription!= null) {
                if (that.usageDescription!= null) {
                    if (!leftUsageDescription.equals(rightUsageDescription)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.usageDescription!= null) {
                    return false;
                }
            }
        }
        {
            List<String> leftUsageParameter;
            leftUsageParameter = (((this.usageParameter!= null)&&(!this.usageParameter.isEmpty()))?this.getUsageParameter():null);
            List<String> rightUsageParameter;
            rightUsageParameter = (((that.usageParameter!= null)&&(!that.usageParameter.isEmpty()))?that.getUsageParameter():null);
            if ((this.usageParameter!= null)&&(!this.usageParameter.isEmpty())) {
                if ((that.usageParameter!= null)&&(!that.usageParameter.isEmpty())) {
                    if (!leftUsageParameter.equals(rightUsageParameter)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.usageParameter!= null)&&(!that.usageParameter.isEmpty())) {
                    return false;
                }
            }
        }
        {
            String leftServiceBinding;
            leftServiceBinding = this.getServiceBinding();
            String rightServiceBinding;
            rightServiceBinding = that.getServiceBinding();
            if (this.serviceBinding!= null) {
                if (that.serviceBinding!= null) {
                    if (!leftServiceBinding.equals(rightServiceBinding)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.serviceBinding!= null) {
                    return false;
                }
            }
        }
        {
            String leftSpecificationObject;
            leftSpecificationObject = this.getSpecificationObject();
            String rightSpecificationObject;
            rightSpecificationObject = that.getSpecificationObject();
            if (this.specificationObject!= null) {
                if (that.specificationObject!= null) {
                    if (!leftSpecificationObject.equals(rightSpecificationObject)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.specificationObject!= null) {
                    return false;
                }
            }
        }
        return true;
    }

    @Override
    public int hashCode() {
        int currentHashCode = 1;
        currentHashCode = ((currentHashCode* 31)+ super.hashCode());
        {
            currentHashCode = (currentHashCode* 31);
            InternationalStringType theUsageDescription;
            theUsageDescription = this.getUsageDescription();
            if (this.usageDescription!= null) {
                currentHashCode += theUsageDescription.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            List<String> theUsageParameter;
            theUsageParameter = (((this.usageParameter!= null)&&(!this.usageParameter.isEmpty()))?this.getUsageParameter():null);
            if ((this.usageParameter!= null)&&(!this.usageParameter.isEmpty())) {
                currentHashCode += theUsageParameter.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            String theServiceBinding;
            theServiceBinding = this.getServiceBinding();
            if (this.serviceBinding!= null) {
                currentHashCode += theServiceBinding.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            String theSpecificationObject;
            theSpecificationObject = this.getSpecificationObject();
            if (this.specificationObject!= null) {
                currentHashCode += theSpecificationObject.hashCode();
            }
        }
        return currentHashCode;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
    }

}
