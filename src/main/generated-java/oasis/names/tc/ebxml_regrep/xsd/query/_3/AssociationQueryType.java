/*
 * Copyright 2023 gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.07.11 at 06:21:54 PM CEST 
//


package oasis.names.tc.ebxml_regrep.xsd.query._3;

import java.util.Collection;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;


/**
 * <p>Java class for AssociationQueryType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AssociationQueryType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}RegistryObjectQueryType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="AssociationTypeQuery" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}ClassificationNodeQueryType" minOccurs="0"/&gt;
 *         &lt;element name="SourceObjectQuery" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}RegistryObjectQueryType" minOccurs="0"/&gt;
 *         &lt;element name="TargetObjectQuery" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}RegistryObjectQueryType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AssociationQueryType", propOrder = {
    "associationTypeQuery",
    "sourceObjectQuery",
    "targetObjectQuery"
})
public class AssociationQueryType
    extends RegistryObjectQueryType
{

    @XmlElement(name = "AssociationTypeQuery")
    protected ClassificationNodeQueryType associationTypeQuery;
    @XmlElement(name = "SourceObjectQuery")
    protected RegistryObjectQueryType sourceObjectQuery;
    @XmlElement(name = "TargetObjectQuery")
    protected RegistryObjectQueryType targetObjectQuery;

    /**
     * Gets the value of the associationTypeQuery property.
     * 
     * @return
     *     possible object is
     *     {@link oasis.names.tc.ebxml_regrep.xsd.query._3.ClassificationNodeQueryType }
     *     
     */
    public ClassificationNodeQueryType getAssociationTypeQuery() {
        return associationTypeQuery;
    }

    /**
     * Sets the value of the associationTypeQuery property.
     * 
     * @param value
     *     allowed object is
     *     {@link oasis.names.tc.ebxml_regrep.xsd.query._3.ClassificationNodeQueryType }
     *     
     */
    public void setAssociationTypeQuery(ClassificationNodeQueryType value) {
        this.associationTypeQuery = value;
    }

    /**
     * Gets the value of the sourceObjectQuery property.
     * 
     * @return
     *     possible object is
     *     {@link oasis.names.tc.ebxml_regrep.xsd.query._3.RegistryObjectQueryType }
     *     
     */
    public RegistryObjectQueryType getSourceObjectQuery() {
        return sourceObjectQuery;
    }

    /**
     * Sets the value of the sourceObjectQuery property.
     * 
     * @param value
     *     allowed object is
     *     {@link oasis.names.tc.ebxml_regrep.xsd.query._3.RegistryObjectQueryType }
     *     
     */
    public void setSourceObjectQuery(RegistryObjectQueryType value) {
        this.sourceObjectQuery = value;
    }

    /**
     * Gets the value of the targetObjectQuery property.
     * 
     * @return
     *     possible object is
     *     {@link oasis.names.tc.ebxml_regrep.xsd.query._3.RegistryObjectQueryType }
     *     
     */
    public RegistryObjectQueryType getTargetObjectQuery() {
        return targetObjectQuery;
    }

    /**
     * Sets the value of the targetObjectQuery property.
     * 
     * @param value
     *     allowed object is
     *     {@link oasis.names.tc.ebxml_regrep.xsd.query._3.RegistryObjectQueryType }
     *     
     */
    public void setTargetObjectQuery(RegistryObjectQueryType value) {
        this.targetObjectQuery = value;
    }

    public AssociationQueryType withAssociationTypeQuery(ClassificationNodeQueryType value) {
        setAssociationTypeQuery(value);
        return this;
    }

    public AssociationQueryType withSourceObjectQuery(RegistryObjectQueryType value) {
        setSourceObjectQuery(value);
        return this;
    }

    public AssociationQueryType withTargetObjectQuery(RegistryObjectQueryType value) {
        setTargetObjectQuery(value);
        return this;
    }

    @Override
    public AssociationQueryType withSlotBranch(SlotBranchType... values) {
        if (values!= null) {
            for (SlotBranchType value: values) {
                getSlotBranch().add(value);
            }
        }
        return this;
    }

    @Override
    public AssociationQueryType withSlotBranch(Collection<SlotBranchType> values) {
        if (values!= null) {
            getSlotBranch().addAll(values);
        }
        return this;
    }

    @Override
    public AssociationQueryType withNameBranch(InternationalStringBranchType value) {
        setNameBranch(value);
        return this;
    }

    @Override
    public AssociationQueryType withDescriptionBranch(InternationalStringBranchType value) {
        setDescriptionBranch(value);
        return this;
    }

    @Override
    public AssociationQueryType withVersionInfoFilter(FilterType value) {
        setVersionInfoFilter(value);
        return this;
    }

    @Override
    public AssociationQueryType withClassificationQuery(ClassificationQueryType... values) {
        if (values!= null) {
            for (ClassificationQueryType value: values) {
                getClassificationQuery().add(value);
            }
        }
        return this;
    }

    @Override
    public AssociationQueryType withClassificationQuery(Collection<ClassificationQueryType> values) {
        if (values!= null) {
            getClassificationQuery().addAll(values);
        }
        return this;
    }

    @Override
    public AssociationQueryType withExternalIdentifierQuery(ExternalIdentifierQueryType... values) {
        if (values!= null) {
            for (ExternalIdentifierQueryType value: values) {
                getExternalIdentifierQuery().add(value);
            }
        }
        return this;
    }

    @Override
    public AssociationQueryType withExternalIdentifierQuery(Collection<ExternalIdentifierQueryType> values) {
        if (values!= null) {
            getExternalIdentifierQuery().addAll(values);
        }
        return this;
    }

    @Override
    public AssociationQueryType withObjectTypeQuery(ClassificationNodeQueryType value) {
        setObjectTypeQuery(value);
        return this;
    }

    @Override
    public AssociationQueryType withStatusQuery(ClassificationNodeQueryType value) {
        setStatusQuery(value);
        return this;
    }

    @Override
    public AssociationQueryType withSourceAssociationQuery(AssociationQueryType... values) {
        if (values!= null) {
            for (AssociationQueryType value: values) {
                getSourceAssociationQuery().add(value);
            }
        }
        return this;
    }

    @Override
    public AssociationQueryType withSourceAssociationQuery(Collection<AssociationQueryType> values) {
        if (values!= null) {
            getSourceAssociationQuery().addAll(values);
        }
        return this;
    }

    @Override
    public AssociationQueryType withTargetAssociationQuery(AssociationQueryType... values) {
        if (values!= null) {
            for (AssociationQueryType value: values) {
                getTargetAssociationQuery().add(value);
            }
        }
        return this;
    }

    @Override
    public AssociationQueryType withTargetAssociationQuery(Collection<AssociationQueryType> values) {
        if (values!= null) {
            getTargetAssociationQuery().addAll(values);
        }
        return this;
    }

    @Override
    public AssociationQueryType withPrimaryFilter(FilterType value) {
        setPrimaryFilter(value);
        return this;
    }

    @Override
    public boolean equals(Object object) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(object)) {
            return false;
        }
        final AssociationQueryType that = ((AssociationQueryType) object);
        {
            ClassificationNodeQueryType leftAssociationTypeQuery;
            leftAssociationTypeQuery = this.getAssociationTypeQuery();
            ClassificationNodeQueryType rightAssociationTypeQuery;
            rightAssociationTypeQuery = that.getAssociationTypeQuery();
            if (this.associationTypeQuery!= null) {
                if (that.associationTypeQuery!= null) {
                    if (!leftAssociationTypeQuery.equals(rightAssociationTypeQuery)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.associationTypeQuery!= null) {
                    return false;
                }
            }
        }
        {
            RegistryObjectQueryType leftSourceObjectQuery;
            leftSourceObjectQuery = this.getSourceObjectQuery();
            RegistryObjectQueryType rightSourceObjectQuery;
            rightSourceObjectQuery = that.getSourceObjectQuery();
            if (this.sourceObjectQuery!= null) {
                if (that.sourceObjectQuery!= null) {
                    if (!leftSourceObjectQuery.equals(rightSourceObjectQuery)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.sourceObjectQuery!= null) {
                    return false;
                }
            }
        }
        {
            RegistryObjectQueryType leftTargetObjectQuery;
            leftTargetObjectQuery = this.getTargetObjectQuery();
            RegistryObjectQueryType rightTargetObjectQuery;
            rightTargetObjectQuery = that.getTargetObjectQuery();
            if (this.targetObjectQuery!= null) {
                if (that.targetObjectQuery!= null) {
                    if (!leftTargetObjectQuery.equals(rightTargetObjectQuery)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.targetObjectQuery!= null) {
                    return false;
                }
            }
        }
        return true;
    }

    @Override
    public int hashCode() {
        int currentHashCode = 1;
        currentHashCode = ((currentHashCode* 31)+ super.hashCode());
        {
            currentHashCode = (currentHashCode* 31);
            ClassificationNodeQueryType theAssociationTypeQuery;
            theAssociationTypeQuery = this.getAssociationTypeQuery();
            if (this.associationTypeQuery!= null) {
                currentHashCode += theAssociationTypeQuery.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            RegistryObjectQueryType theSourceObjectQuery;
            theSourceObjectQuery = this.getSourceObjectQuery();
            if (this.sourceObjectQuery!= null) {
                currentHashCode += theSourceObjectQuery.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            RegistryObjectQueryType theTargetObjectQuery;
            theTargetObjectQuery = this.getTargetObjectQuery();
            if (this.targetObjectQuery!= null) {
                currentHashCode += theTargetObjectQuery.hashCode();
            }
        }
        return currentHashCode;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
    }

}
