/*
 * Copyright 2023 gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.07.11 at 06:21:54 PM CEST 
//


package oasis.names.tc.ebxml_regrep.xsd.rs._3;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0}RegistryError" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="highestSeverity" type="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}referenceURI" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "registryError"
})
@XmlRootElement(name = "RegistryErrorList")
public class RegistryErrorList {

    @XmlElement(name = "RegistryError", required = true)
    protected List<RegistryError> registryError;
    @XmlAttribute(name = "highestSeverity")
    protected String highestSeverity;

    /**
     * Gets the value of the registryError property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the registryError property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRegistryError().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RegistryError }
     * 
     * 
     */
    public List<RegistryError> getRegistryError() {
        if (registryError == null) {
            registryError = new ArrayList<RegistryError>();
        }
        return this.registryError;
    }

    /**
     * Gets the value of the highestSeverity property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHighestSeverity() {
        return highestSeverity;
    }

    /**
     * Sets the value of the highestSeverity property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHighestSeverity(String value) {
        this.highestSeverity = value;
    }

    public RegistryErrorList withRegistryError(RegistryError... values) {
        if (values!= null) {
            for (RegistryError value: values) {
                getRegistryError().add(value);
            }
        }
        return this;
    }

    public RegistryErrorList withRegistryError(Collection<RegistryError> values) {
        if (values!= null) {
            getRegistryError().addAll(values);
        }
        return this;
    }

    public RegistryErrorList withHighestSeverity(String value) {
        setHighestSeverity(value);
        return this;
    }

    @Override
    public boolean equals(Object object) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final RegistryErrorList that = ((RegistryErrorList) object);
        {
            List<RegistryError> leftRegistryError;
            leftRegistryError = (((this.registryError!= null)&&(!this.registryError.isEmpty()))?this.getRegistryError():null);
            List<RegistryError> rightRegistryError;
            rightRegistryError = (((that.registryError!= null)&&(!that.registryError.isEmpty()))?that.getRegistryError():null);
            if ((this.registryError!= null)&&(!this.registryError.isEmpty())) {
                if ((that.registryError!= null)&&(!that.registryError.isEmpty())) {
                    if (!leftRegistryError.equals(rightRegistryError)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.registryError!= null)&&(!that.registryError.isEmpty())) {
                    return false;
                }
            }
        }
        {
            String leftHighestSeverity;
            leftHighestSeverity = this.getHighestSeverity();
            String rightHighestSeverity;
            rightHighestSeverity = that.getHighestSeverity();
            if (this.highestSeverity!= null) {
                if (that.highestSeverity!= null) {
                    if (!leftHighestSeverity.equals(rightHighestSeverity)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.highestSeverity!= null) {
                    return false;
                }
            }
        }
        return true;
    }

    @Override
    public int hashCode() {
        int currentHashCode = 1;
        {
            currentHashCode = (currentHashCode* 31);
            List<RegistryError> theRegistryError;
            theRegistryError = (((this.registryError!= null)&&(!this.registryError.isEmpty()))?this.getRegistryError():null);
            if ((this.registryError!= null)&&(!this.registryError.isEmpty())) {
                currentHashCode += theRegistryError.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            String theHighestSeverity;
            theHighestSeverity = this.getHighestSeverity();
            if (this.highestSeverity!= null) {
                currentHashCode += theHighestSeverity.hashCode();
            }
        }
        return currentHashCode;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
    }

}
