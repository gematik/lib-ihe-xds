/*-
 * #%L
 * lib-ihe-xds
 * %%
 * Copyright (C) 2023 - 2025 gematik GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * *******
 * 
 * For additional notes and disclaimer from gematik and in case of changes by gematik find details in the "Readme" file.
 * #L%
 */
//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.07.11 at 06:21:54 PM CEST 
//


package oasis.names.tc.ebxml_regrep.xsd.rim._3;


import java.util.Collection;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;


/**
 * 
 *         ExtrinsicObject is the mapping of the same named interface in ebRIM.
 *         It extends RegistryObject.
 *       
 * 
 * <p>Java class for ExtrinsicObjectType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ExtrinsicObjectType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}RegistryObjectType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="ContentVersionInfo" type="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}VersionInfoType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="mimeType" type="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}LongName" default="application/octet-stream" /&gt;
 *       &lt;attribute name="isOpaque" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ExtrinsicObjectType", propOrder = {
    "contentVersionInfo"
})
public class ExtrinsicObjectType
    extends RegistryObjectType
{

    @XmlElement(name = "ContentVersionInfo")
    protected VersionInfoType contentVersionInfo;
    @XmlAttribute(name = "mimeType")
    protected String mimeType;
    @XmlAttribute(name = "isOpaque")
    protected Boolean isOpaque;

    /**
     * Gets the value of the contentVersionInfo property.
     * 
     * @return
     *     possible object is
     *     {@link VersionInfoType }
     *     
     */
    public VersionInfoType getContentVersionInfo() {
        return contentVersionInfo;
    }

    /**
     * Sets the value of the contentVersionInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link VersionInfoType }
     *     
     */
    public void setContentVersionInfo(VersionInfoType value) {
        this.contentVersionInfo = value;
    }

    /**
     * Gets the value of the mimeType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMimeType() {
        if (mimeType == null) {
            return "application/octet-stream";
        } else {
            return mimeType;
        }
    }

    /**
     * Sets the value of the mimeType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMimeType(String value) {
        this.mimeType = value;
    }

    /**
     * Gets the value of the isOpaque property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isIsOpaque() {
        if (isOpaque == null) {
            return false;
        } else {
            return isOpaque;
        }
    }

    /**
     * Sets the value of the isOpaque property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsOpaque(Boolean value) {
        this.isOpaque = value;
    }

    public ExtrinsicObjectType withContentVersionInfo(VersionInfoType value) {
        setContentVersionInfo(value);
        return this;
    }

    public ExtrinsicObjectType withMimeType(String value) {
        setMimeType(value);
        return this;
    }

    public ExtrinsicObjectType withIsOpaque(Boolean value) {
        setIsOpaque(value);
        return this;
    }

    @Override
    public ExtrinsicObjectType withName(InternationalStringType value) {
        setName(value);
        return this;
    }

    @Override
    public ExtrinsicObjectType withDescription(InternationalStringType value) {
        setDescription(value);
        return this;
    }

    @Override
    public ExtrinsicObjectType withVersionInfo(VersionInfoType value) {
        setVersionInfo(value);
        return this;
    }

    @Override
    public ExtrinsicObjectType withClassification(ClassificationType... values) {
        if (values!= null) {
            for (ClassificationType value: values) {
                getClassification().add(value);
            }
        }
        return this;
    }

    @Override
    public ExtrinsicObjectType withClassification(Collection<ClassificationType> values) {
        if (values!= null) {
            getClassification().addAll(values);
        }
        return this;
    }

    @Override
    public ExtrinsicObjectType withExternalIdentifier(ExternalIdentifierType... values) {
        if (values!= null) {
            for (ExternalIdentifierType value: values) {
                getExternalIdentifier().add(value);
            }
        }
        return this;
    }

    @Override
    public ExtrinsicObjectType withExternalIdentifier(Collection<ExternalIdentifierType> values) {
        if (values!= null) {
            getExternalIdentifier().addAll(values);
        }
        return this;
    }

    @Override
    public ExtrinsicObjectType withLid(String value) {
        setLid(value);
        return this;
    }

    @Override
    public ExtrinsicObjectType withObjectType(String value) {
        setObjectType(value);
        return this;
    }

    @Override
    public ExtrinsicObjectType withStatus(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public ExtrinsicObjectType withSlot(SlotType1 ... values) {
        if (values!= null) {
            for (SlotType1 value: values) {
                getSlot().add(value);
            }
        }
        return this;
    }

    @Override
    public ExtrinsicObjectType withSlot(Collection<SlotType1> values) {
        if (values!= null) {
            getSlot().addAll(values);
        }
        return this;
    }

    @Override
    public ExtrinsicObjectType withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ExtrinsicObjectType withHome(String value) {
        setHome(value);
        return this;
    }

    @Override
    public boolean equals(Object object) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(object)) {
            return false;
        }
        final ExtrinsicObjectType that = ((ExtrinsicObjectType) object);
        {
            VersionInfoType leftContentVersionInfo;
            leftContentVersionInfo = this.getContentVersionInfo();
            VersionInfoType rightContentVersionInfo;
            rightContentVersionInfo = that.getContentVersionInfo();
            if (this.contentVersionInfo!= null) {
                if (that.contentVersionInfo!= null) {
                    if (!leftContentVersionInfo.equals(rightContentVersionInfo)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.contentVersionInfo!= null) {
                    return false;
                }
            }
        }
        {
            String leftMimeType;
            leftMimeType = this.getMimeType();
            String rightMimeType;
            rightMimeType = that.getMimeType();
            if (this.mimeType!= null) {
                if (that.mimeType!= null) {
                    if (!leftMimeType.equals(rightMimeType)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.mimeType!= null) {
                    return false;
                }
            }
        }
        {
            boolean leftIsOpaque;
            leftIsOpaque = ((this.isOpaque!= null)?this.isIsOpaque():false);
            boolean rightIsOpaque;
            rightIsOpaque = ((that.isOpaque!= null)?that.isIsOpaque():false);
            if (this.isOpaque!= null) {
                if (that.isOpaque!= null) {
                    if (leftIsOpaque!= rightIsOpaque) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.isOpaque!= null) {
                    return false;
                }
            }
        }
        return true;
    }

    @Override
    public int hashCode() {
        int currentHashCode = 1;
        currentHashCode = ((currentHashCode* 31)+ super.hashCode());
        {
            currentHashCode = (currentHashCode* 31);
            VersionInfoType theContentVersionInfo;
            theContentVersionInfo = this.getContentVersionInfo();
            if (this.contentVersionInfo!= null) {
                currentHashCode += theContentVersionInfo.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            String theMimeType;
            theMimeType = this.getMimeType();
            if (this.mimeType!= null) {
                currentHashCode += theMimeType.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            boolean theIsOpaque;
            theIsOpaque = ((this.isOpaque!= null)?this.isIsOpaque():false);
            if (this.isOpaque!= null) {
                currentHashCode += (theIsOpaque? 1231 : 1237);
            }
        }
        return currentHashCode;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
    }

}
