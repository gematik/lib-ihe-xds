/*
 * Copyright 2023 gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.07.11 at 06:21:54 PM CEST 
//


package oasis.names.tc.ebxml_regrep.xsd.rim._3;

import java.util.Collection;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;


/**
 * 
 *         Classification is the mapping of the same named interface in ebRIM.
 *         It extends RegistryObject.
 *         A Classification specifies references to two registry entrys.
 *         The classifiedObject is id of the Object being classified.
 *         The classificationNode is id of the ClassificationNode classying the object
 *       
 * 
 * <p>Java class for ClassificationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ClassificationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}RegistryObjectType"&gt;
 *       &lt;attribute name="classificationScheme" type="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}referenceURI" /&gt;
 *       &lt;attribute name="classifiedObject" use="required" type="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}referenceURI" /&gt;
 *       &lt;attribute name="classificationNode" type="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}referenceURI" /&gt;
 *       &lt;attribute name="nodeRepresentation" type="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}LongName" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ClassificationType")
public class ClassificationType
    extends RegistryObjectType
{

    @XmlAttribute(name = "classificationScheme")
    protected String classificationScheme;
    @XmlAttribute(name = "classifiedObject", required = true)
    protected String classifiedObject;
    @XmlAttribute(name = "classificationNode")
    protected String classificationNode;
    @XmlAttribute(name = "nodeRepresentation")
    protected String nodeRepresentation;

    /**
     * Gets the value of the classificationScheme property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getClassificationScheme() {
        return classificationScheme;
    }

    /**
     * Sets the value of the classificationScheme property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setClassificationScheme(String value) {
        this.classificationScheme = value;
    }

    /**
     * Gets the value of the classifiedObject property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getClassifiedObject() {
        return classifiedObject;
    }

    /**
     * Sets the value of the classifiedObject property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setClassifiedObject(String value) {
        this.classifiedObject = value;
    }

    /**
     * Gets the value of the classificationNode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getClassificationNode() {
        return classificationNode;
    }

    /**
     * Sets the value of the classificationNode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setClassificationNode(String value) {
        this.classificationNode = value;
    }

    /**
     * Gets the value of the nodeRepresentation property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNodeRepresentation() {
        return nodeRepresentation;
    }

    /**
     * Sets the value of the nodeRepresentation property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNodeRepresentation(String value) {
        this.nodeRepresentation = value;
    }

    public ClassificationType withClassificationScheme(String value) {
        setClassificationScheme(value);
        return this;
    }

    public ClassificationType withClassifiedObject(String value) {
        setClassifiedObject(value);
        return this;
    }

    public ClassificationType withClassificationNode(String value) {
        setClassificationNode(value);
        return this;
    }

    public ClassificationType withNodeRepresentation(String value) {
        setNodeRepresentation(value);
        return this;
    }

    @Override
    public ClassificationType withName(InternationalStringType value) {
        setName(value);
        return this;
    }

    @Override
    public ClassificationType withDescription(InternationalStringType value) {
        setDescription(value);
        return this;
    }

    @Override
    public ClassificationType withVersionInfo(VersionInfoType value) {
        setVersionInfo(value);
        return this;
    }

    @Override
    public ClassificationType withClassification(ClassificationType... values) {
        if (values!= null) {
            for (ClassificationType value: values) {
                getClassification().add(value);
            }
        }
        return this;
    }

    @Override
    public ClassificationType withClassification(Collection<ClassificationType> values) {
        if (values!= null) {
            getClassification().addAll(values);
        }
        return this;
    }

    @Override
    public ClassificationType withExternalIdentifier(ExternalIdentifierType... values) {
        if (values!= null) {
            for (ExternalIdentifierType value: values) {
                getExternalIdentifier().add(value);
            }
        }
        return this;
    }

    @Override
    public ClassificationType withExternalIdentifier(Collection<ExternalIdentifierType> values) {
        if (values!= null) {
            getExternalIdentifier().addAll(values);
        }
        return this;
    }

    @Override
    public ClassificationType withLid(String value) {
        setLid(value);
        return this;
    }

    @Override
    public ClassificationType withObjectType(String value) {
        setObjectType(value);
        return this;
    }

    @Override
    public ClassificationType withStatus(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public ClassificationType withSlot(SlotType1 ... values) {
        if (values!= null) {
            for (SlotType1 value: values) {
                getSlot().add(value);
            }
        }
        return this;
    }

    @Override
    public ClassificationType withSlot(Collection<SlotType1> values) {
        if (values!= null) {
            getSlot().addAll(values);
        }
        return this;
    }

    @Override
    public ClassificationType withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ClassificationType withHome(String value) {
        setHome(value);
        return this;
    }

    @Override
    public boolean equals(Object object) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(object)) {
            return false;
        }
        final ClassificationType that = ((ClassificationType) object);
        {
            String leftClassificationScheme;
            leftClassificationScheme = this.getClassificationScheme();
            String rightClassificationScheme;
            rightClassificationScheme = that.getClassificationScheme();
            if (this.classificationScheme!= null) {
                if (that.classificationScheme!= null) {
                    if (!leftClassificationScheme.equals(rightClassificationScheme)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.classificationScheme!= null) {
                    return false;
                }
            }
        }
        {
            String leftClassifiedObject;
            leftClassifiedObject = this.getClassifiedObject();
            String rightClassifiedObject;
            rightClassifiedObject = that.getClassifiedObject();
            if (this.classifiedObject!= null) {
                if (that.classifiedObject!= null) {
                    if (!leftClassifiedObject.equals(rightClassifiedObject)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.classifiedObject!= null) {
                    return false;
                }
            }
        }
        {
            String leftClassificationNode;
            leftClassificationNode = this.getClassificationNode();
            String rightClassificationNode;
            rightClassificationNode = that.getClassificationNode();
            if (this.classificationNode!= null) {
                if (that.classificationNode!= null) {
                    if (!leftClassificationNode.equals(rightClassificationNode)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.classificationNode!= null) {
                    return false;
                }
            }
        }
        {
            String leftNodeRepresentation;
            leftNodeRepresentation = this.getNodeRepresentation();
            String rightNodeRepresentation;
            rightNodeRepresentation = that.getNodeRepresentation();
            if (this.nodeRepresentation!= null) {
                if (that.nodeRepresentation!= null) {
                    if (!leftNodeRepresentation.equals(rightNodeRepresentation)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.nodeRepresentation!= null) {
                    return false;
                }
            }
        }
        return true;
    }

    @Override
    public int hashCode() {
        int currentHashCode = 1;
        currentHashCode = ((currentHashCode* 31)+ super.hashCode());
        {
            currentHashCode = (currentHashCode* 31);
            String theClassificationScheme;
            theClassificationScheme = this.getClassificationScheme();
            if (this.classificationScheme!= null) {
                currentHashCode += theClassificationScheme.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            String theClassifiedObject;
            theClassifiedObject = this.getClassifiedObject();
            if (this.classifiedObject!= null) {
                currentHashCode += theClassifiedObject.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            String theClassificationNode;
            theClassificationNode = this.getClassificationNode();
            if (this.classificationNode!= null) {
                currentHashCode += theClassificationNode.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            String theNodeRepresentation;
            theNodeRepresentation = this.getNodeRepresentation();
            if (this.nodeRepresentation!= null) {
                currentHashCode += theNodeRepresentation.hashCode();
            }
        }
        return currentHashCode;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
    }

}
