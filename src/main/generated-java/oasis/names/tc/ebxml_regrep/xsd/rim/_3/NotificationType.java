/*
 * Copyright 2023 gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.07.11 at 06:21:54 PM CEST 
//


package oasis.names.tc.ebxml_regrep.xsd.rim._3;

import java.util.Collection;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;


/**
 * Notification of registry events.
 * 
 * <p>Java class for NotificationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="NotificationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}RegistryObjectType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}RegistryObjectList"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="subscription" use="required" type="{urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0}referenceURI" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NotificationType", propOrder = {
    "registryObjectList"
})
public class NotificationType
    extends RegistryObjectType
{

    @XmlElement(name = "RegistryObjectList", required = true)
    protected RegistryObjectListType registryObjectList;
    @XmlAttribute(name = "subscription", required = true)
    protected String subscription;

    /**
     * Gets the value of the registryObjectList property.
     * 
     * @return
     *     possible object is
     *     {@link RegistryObjectListType }
     *     
     */
    public RegistryObjectListType getRegistryObjectList() {
        return registryObjectList;
    }

    /**
     * Sets the value of the registryObjectList property.
     * 
     * @param value
     *     allowed object is
     *     {@link RegistryObjectListType }
     *     
     */
    public void setRegistryObjectList(RegistryObjectListType value) {
        this.registryObjectList = value;
    }

    /**
     * Gets the value of the subscription property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSubscription() {
        return subscription;
    }

    /**
     * Sets the value of the subscription property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSubscription(String value) {
        this.subscription = value;
    }

    public NotificationType withRegistryObjectList(RegistryObjectListType value) {
        setRegistryObjectList(value);
        return this;
    }

    public NotificationType withSubscription(String value) {
        setSubscription(value);
        return this;
    }

    @Override
    public NotificationType withName(InternationalStringType value) {
        setName(value);
        return this;
    }

    @Override
    public NotificationType withDescription(InternationalStringType value) {
        setDescription(value);
        return this;
    }

    @Override
    public NotificationType withVersionInfo(VersionInfoType value) {
        setVersionInfo(value);
        return this;
    }

    @Override
    public NotificationType withClassification(ClassificationType... values) {
        if (values!= null) {
            for (ClassificationType value: values) {
                getClassification().add(value);
            }
        }
        return this;
    }

    @Override
    public NotificationType withClassification(Collection<ClassificationType> values) {
        if (values!= null) {
            getClassification().addAll(values);
        }
        return this;
    }

    @Override
    public NotificationType withExternalIdentifier(ExternalIdentifierType... values) {
        if (values!= null) {
            for (ExternalIdentifierType value: values) {
                getExternalIdentifier().add(value);
            }
        }
        return this;
    }

    @Override
    public NotificationType withExternalIdentifier(Collection<ExternalIdentifierType> values) {
        if (values!= null) {
            getExternalIdentifier().addAll(values);
        }
        return this;
    }

    @Override
    public NotificationType withLid(String value) {
        setLid(value);
        return this;
    }

    @Override
    public NotificationType withObjectType(String value) {
        setObjectType(value);
        return this;
    }

    @Override
    public NotificationType withStatus(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public NotificationType withSlot(SlotType1 ... values) {
        if (values!= null) {
            for (SlotType1 value: values) {
                getSlot().add(value);
            }
        }
        return this;
    }

    @Override
    public NotificationType withSlot(Collection<SlotType1> values) {
        if (values!= null) {
            getSlot().addAll(values);
        }
        return this;
    }

    @Override
    public NotificationType withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public NotificationType withHome(String value) {
        setHome(value);
        return this;
    }

    @Override
    public boolean equals(Object object) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(object)) {
            return false;
        }
        final NotificationType that = ((NotificationType) object);
        {
            RegistryObjectListType leftRegistryObjectList;
            leftRegistryObjectList = this.getRegistryObjectList();
            RegistryObjectListType rightRegistryObjectList;
            rightRegistryObjectList = that.getRegistryObjectList();
            if (this.registryObjectList!= null) {
                if (that.registryObjectList!= null) {
                    if (!leftRegistryObjectList.equals(rightRegistryObjectList)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.registryObjectList!= null) {
                    return false;
                }
            }
        }
        {
            String leftSubscription;
            leftSubscription = this.getSubscription();
            String rightSubscription;
            rightSubscription = that.getSubscription();
            if (this.subscription!= null) {
                if (that.subscription!= null) {
                    if (!leftSubscription.equals(rightSubscription)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.subscription!= null) {
                    return false;
                }
            }
        }
        return true;
    }

    @Override
    public int hashCode() {
        int currentHashCode = 1;
        currentHashCode = ((currentHashCode* 31)+ super.hashCode());
        {
            currentHashCode = (currentHashCode* 31);
            RegistryObjectListType theRegistryObjectList;
            theRegistryObjectList = this.getRegistryObjectList();
            if (this.registryObjectList!= null) {
                currentHashCode += theRegistryObjectList.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            String theSubscription;
            theSubscription = this.getSubscription();
            if (this.subscription!= null) {
                currentHashCode += theSubscription.hashCode();
            }
        }
        return currentHashCode;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
    }

}
