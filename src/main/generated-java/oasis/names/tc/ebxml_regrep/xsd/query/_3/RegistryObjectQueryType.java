/*
 * Copyright 2023 gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.07.11 at 06:21:54 PM CEST 
//


package oasis.names.tc.ebxml_regrep.xsd.query._3;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;


/**
 * <p>Java class for RegistryObjectQueryType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RegistryObjectQueryType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}FilterQueryType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="SlotBranch" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}SlotBranchType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="NameBranch" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}InternationalStringBranchType" minOccurs="0"/&gt;
 *         &lt;element name="DescriptionBranch" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}InternationalStringBranchType" minOccurs="0"/&gt;
 *         &lt;element name="VersionInfoFilter" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}FilterType" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}ClassificationQuery" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}ExternalIdentifierQuery" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="ObjectTypeQuery" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}ClassificationNodeQueryType" minOccurs="0"/&gt;
 *         &lt;element name="StatusQuery" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}ClassificationNodeQueryType" minOccurs="0"/&gt;
 *         &lt;element name="SourceAssociationQuery" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}AssociationQueryType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="TargetAssociationQuery" type="{urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0}AssociationQueryType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RegistryObjectQueryType", propOrder = {
    "slotBranch",
    "nameBranch",
    "descriptionBranch",
    "versionInfoFilter",
    "classificationQuery",
    "externalIdentifierQuery",
    "objectTypeQuery",
    "statusQuery",
    "sourceAssociationQuery",
    "targetAssociationQuery"
})
@XmlSeeAlso({
    AssociationQueryType.class,
    AuditableEventQueryType.class,
    ClassificationQueryType.class,
    ClassificationNodeQueryType.class,
    ClassificationSchemeQueryType.class,
    ExternalIdentifierQueryType.class,
    ExternalLinkQueryType.class,
    ExtrinsicObjectQueryType.class,
    OrganizationQueryType.class,
    RegistryPackageQueryType.class,
    ServiceQueryType.class,
    ServiceBindingQueryType.class,
    SpecificationLinkQueryType.class,
    PersonQueryType.class,
    RegistryQueryType.class,
    FederationQueryType.class,
    AdhocQueryQueryType.class,
    NotificationQueryType.class,
    SubscriptionQueryType.class
})
public class RegistryObjectQueryType
    extends FilterQueryType
{

    @XmlElement(name = "SlotBranch")
    protected List<SlotBranchType> slotBranch;
    @XmlElement(name = "NameBranch")
    protected InternationalStringBranchType nameBranch;
    @XmlElement(name = "DescriptionBranch")
    protected InternationalStringBranchType descriptionBranch;
    @XmlElement(name = "VersionInfoFilter")
    protected FilterType versionInfoFilter;
    @XmlElement(name = "ClassificationQuery")
    protected List<ClassificationQueryType> classificationQuery;
    @XmlElement(name = "ExternalIdentifierQuery")
    protected List<ExternalIdentifierQueryType> externalIdentifierQuery;
    @XmlElement(name = "ObjectTypeQuery")
    protected ClassificationNodeQueryType objectTypeQuery;
    @XmlElement(name = "StatusQuery")
    protected ClassificationNodeQueryType statusQuery;
    @XmlElement(name = "SourceAssociationQuery")
    protected List<AssociationQueryType> sourceAssociationQuery;
    @XmlElement(name = "TargetAssociationQuery")
    protected List<AssociationQueryType> targetAssociationQuery;

    /**
     * Gets the value of the slotBranch property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the slotBranch property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSlotBranch().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SlotBranchType }
     * 
     * 
     */
    public List<SlotBranchType> getSlotBranch() {
        if (slotBranch == null) {
            slotBranch = new ArrayList<SlotBranchType>();
        }
        return this.slotBranch;
    }

    /**
     * Gets the value of the nameBranch property.
     * 
     * @return
     *     possible object is
     *     {@link InternationalStringBranchType }
     *     
     */
    public InternationalStringBranchType getNameBranch() {
        return nameBranch;
    }

    /**
     * Sets the value of the nameBranch property.
     * 
     * @param value
     *     allowed object is
     *     {@link InternationalStringBranchType }
     *     
     */
    public void setNameBranch(InternationalStringBranchType value) {
        this.nameBranch = value;
    }

    /**
     * Gets the value of the descriptionBranch property.
     * 
     * @return
     *     possible object is
     *     {@link InternationalStringBranchType }
     *     
     */
    public InternationalStringBranchType getDescriptionBranch() {
        return descriptionBranch;
    }

    /**
     * Sets the value of the descriptionBranch property.
     * 
     * @param value
     *     allowed object is
     *     {@link InternationalStringBranchType }
     *     
     */
    public void setDescriptionBranch(InternationalStringBranchType value) {
        this.descriptionBranch = value;
    }

    /**
     * Gets the value of the versionInfoFilter property.
     * 
     * @return
     *     possible object is
     *     {@link FilterType }
     *     
     */
    public FilterType getVersionInfoFilter() {
        return versionInfoFilter;
    }

    /**
     * Sets the value of the versionInfoFilter property.
     * 
     * @param value
     *     allowed object is
     *     {@link FilterType }
     *     
     */
    public void setVersionInfoFilter(FilterType value) {
        this.versionInfoFilter = value;
    }

    /**
     * Gets the value of the classificationQuery property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the classificationQuery property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getClassificationQuery().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ClassificationQueryType }
     * 
     * 
     */
    public List<ClassificationQueryType> getClassificationQuery() {
        if (classificationQuery == null) {
            classificationQuery = new ArrayList<ClassificationQueryType>();
        }
        return this.classificationQuery;
    }

    /**
     * Gets the value of the externalIdentifierQuery property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the externalIdentifierQuery property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExternalIdentifierQuery().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ExternalIdentifierQueryType }
     * 
     * 
     */
    public List<ExternalIdentifierQueryType> getExternalIdentifierQuery() {
        if (externalIdentifierQuery == null) {
            externalIdentifierQuery = new ArrayList<ExternalIdentifierQueryType>();
        }
        return this.externalIdentifierQuery;
    }

    /**
     * Gets the value of the objectTypeQuery property.
     * 
     * @return
     *     possible object is
     *     {@link ClassificationNodeQueryType }
     *     
     */
    public ClassificationNodeQueryType getObjectTypeQuery() {
        return objectTypeQuery;
    }

    /**
     * Sets the value of the objectTypeQuery property.
     * 
     * @param value
     *     allowed object is
     *     {@link ClassificationNodeQueryType }
     *     
     */
    public void setObjectTypeQuery(ClassificationNodeQueryType value) {
        this.objectTypeQuery = value;
    }

    /**
     * Gets the value of the statusQuery property.
     * 
     * @return
     *     possible object is
     *     {@link ClassificationNodeQueryType }
     *     
     */
    public ClassificationNodeQueryType getStatusQuery() {
        return statusQuery;
    }

    /**
     * Sets the value of the statusQuery property.
     * 
     * @param value
     *     allowed object is
     *     {@link ClassificationNodeQueryType }
     *     
     */
    public void setStatusQuery(ClassificationNodeQueryType value) {
        this.statusQuery = value;
    }

    /**
     * Gets the value of the sourceAssociationQuery property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the sourceAssociationQuery property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSourceAssociationQuery().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AssociationQueryType }
     * 
     * 
     */
    public List<AssociationQueryType> getSourceAssociationQuery() {
        if (sourceAssociationQuery == null) {
            sourceAssociationQuery = new ArrayList<AssociationQueryType>();
        }
        return this.sourceAssociationQuery;
    }

    /**
     * Gets the value of the targetAssociationQuery property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the targetAssociationQuery property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTargetAssociationQuery().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AssociationQueryType }
     * 
     * 
     */
    public List<AssociationQueryType> getTargetAssociationQuery() {
        if (targetAssociationQuery == null) {
            targetAssociationQuery = new ArrayList<AssociationQueryType>();
        }
        return this.targetAssociationQuery;
    }

    public RegistryObjectQueryType withSlotBranch(SlotBranchType... values) {
        if (values!= null) {
            for (SlotBranchType value: values) {
                getSlotBranch().add(value);
            }
        }
        return this;
    }

    public RegistryObjectQueryType withSlotBranch(Collection<SlotBranchType> values) {
        if (values!= null) {
            getSlotBranch().addAll(values);
        }
        return this;
    }

    public RegistryObjectQueryType withNameBranch(InternationalStringBranchType value) {
        setNameBranch(value);
        return this;
    }

    public RegistryObjectQueryType withDescriptionBranch(InternationalStringBranchType value) {
        setDescriptionBranch(value);
        return this;
    }

    public RegistryObjectQueryType withVersionInfoFilter(FilterType value) {
        setVersionInfoFilter(value);
        return this;
    }

    public RegistryObjectQueryType withClassificationQuery(ClassificationQueryType... values) {
        if (values!= null) {
            for (ClassificationQueryType value: values) {
                getClassificationQuery().add(value);
            }
        }
        return this;
    }

    public RegistryObjectQueryType withClassificationQuery(Collection<ClassificationQueryType> values) {
        if (values!= null) {
            getClassificationQuery().addAll(values);
        }
        return this;
    }

    public RegistryObjectQueryType withExternalIdentifierQuery(ExternalIdentifierQueryType... values) {
        if (values!= null) {
            for (ExternalIdentifierQueryType value: values) {
                getExternalIdentifierQuery().add(value);
            }
        }
        return this;
    }

    public RegistryObjectQueryType withExternalIdentifierQuery(Collection<ExternalIdentifierQueryType> values) {
        if (values!= null) {
            getExternalIdentifierQuery().addAll(values);
        }
        return this;
    }

    public RegistryObjectQueryType withObjectTypeQuery(ClassificationNodeQueryType value) {
        setObjectTypeQuery(value);
        return this;
    }

    public RegistryObjectQueryType withStatusQuery(ClassificationNodeQueryType value) {
        setStatusQuery(value);
        return this;
    }

    public RegistryObjectQueryType withSourceAssociationQuery(AssociationQueryType... values) {
        if (values!= null) {
            for (AssociationQueryType value: values) {
                getSourceAssociationQuery().add(value);
            }
        }
        return this;
    }

    public RegistryObjectQueryType withSourceAssociationQuery(Collection<AssociationQueryType> values) {
        if (values!= null) {
            getSourceAssociationQuery().addAll(values);
        }
        return this;
    }

    public RegistryObjectQueryType withTargetAssociationQuery(AssociationQueryType... values) {
        if (values!= null) {
            for (AssociationQueryType value: values) {
                getTargetAssociationQuery().add(value);
            }
        }
        return this;
    }

    public RegistryObjectQueryType withTargetAssociationQuery(Collection<AssociationQueryType> values) {
        if (values!= null) {
            getTargetAssociationQuery().addAll(values);
        }
        return this;
    }

    @Override
    public RegistryObjectQueryType withPrimaryFilter(FilterType value) {
        setPrimaryFilter(value);
        return this;
    }

    @Override
    public boolean equals(Object object) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(object)) {
            return false;
        }
        final RegistryObjectQueryType that = ((RegistryObjectQueryType) object);
        {
            List<SlotBranchType> leftSlotBranch;
            leftSlotBranch = (((this.slotBranch!= null)&&(!this.slotBranch.isEmpty()))?this.getSlotBranch():null);
            List<SlotBranchType> rightSlotBranch;
            rightSlotBranch = (((that.slotBranch!= null)&&(!that.slotBranch.isEmpty()))?that.getSlotBranch():null);
            if ((this.slotBranch!= null)&&(!this.slotBranch.isEmpty())) {
                if ((that.slotBranch!= null)&&(!that.slotBranch.isEmpty())) {
                    if (!leftSlotBranch.equals(rightSlotBranch)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.slotBranch!= null)&&(!that.slotBranch.isEmpty())) {
                    return false;
                }
            }
        }
        {
            InternationalStringBranchType leftNameBranch;
            leftNameBranch = this.getNameBranch();
            InternationalStringBranchType rightNameBranch;
            rightNameBranch = that.getNameBranch();
            if (this.nameBranch!= null) {
                if (that.nameBranch!= null) {
                    if (!leftNameBranch.equals(rightNameBranch)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.nameBranch!= null) {
                    return false;
                }
            }
        }
        {
            InternationalStringBranchType leftDescriptionBranch;
            leftDescriptionBranch = this.getDescriptionBranch();
            InternationalStringBranchType rightDescriptionBranch;
            rightDescriptionBranch = that.getDescriptionBranch();
            if (this.descriptionBranch!= null) {
                if (that.descriptionBranch!= null) {
                    if (!leftDescriptionBranch.equals(rightDescriptionBranch)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.descriptionBranch!= null) {
                    return false;
                }
            }
        }
        {
            FilterType leftVersionInfoFilter;
            leftVersionInfoFilter = this.getVersionInfoFilter();
            FilterType rightVersionInfoFilter;
            rightVersionInfoFilter = that.getVersionInfoFilter();
            if (this.versionInfoFilter!= null) {
                if (that.versionInfoFilter!= null) {
                    if (!leftVersionInfoFilter.equals(rightVersionInfoFilter)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.versionInfoFilter!= null) {
                    return false;
                }
            }
        }
        {
            List<ClassificationQueryType> leftClassificationQuery;
            leftClassificationQuery = (((this.classificationQuery!= null)&&(!this.classificationQuery.isEmpty()))?this.getClassificationQuery():null);
            List<ClassificationQueryType> rightClassificationQuery;
            rightClassificationQuery = (((that.classificationQuery!= null)&&(!that.classificationQuery.isEmpty()))?that.getClassificationQuery():null);
            if ((this.classificationQuery!= null)&&(!this.classificationQuery.isEmpty())) {
                if ((that.classificationQuery!= null)&&(!that.classificationQuery.isEmpty())) {
                    if (!leftClassificationQuery.equals(rightClassificationQuery)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.classificationQuery!= null)&&(!that.classificationQuery.isEmpty())) {
                    return false;
                }
            }
        }
        {
            List<ExternalIdentifierQueryType> leftExternalIdentifierQuery;
            leftExternalIdentifierQuery = (((this.externalIdentifierQuery!= null)&&(!this.externalIdentifierQuery.isEmpty()))?this.getExternalIdentifierQuery():null);
            List<ExternalIdentifierQueryType> rightExternalIdentifierQuery;
            rightExternalIdentifierQuery = (((that.externalIdentifierQuery!= null)&&(!that.externalIdentifierQuery.isEmpty()))?that.getExternalIdentifierQuery():null);
            if ((this.externalIdentifierQuery!= null)&&(!this.externalIdentifierQuery.isEmpty())) {
                if ((that.externalIdentifierQuery!= null)&&(!that.externalIdentifierQuery.isEmpty())) {
                    if (!leftExternalIdentifierQuery.equals(rightExternalIdentifierQuery)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.externalIdentifierQuery!= null)&&(!that.externalIdentifierQuery.isEmpty())) {
                    return false;
                }
            }
        }
        {
            ClassificationNodeQueryType leftObjectTypeQuery;
            leftObjectTypeQuery = this.getObjectTypeQuery();
            ClassificationNodeQueryType rightObjectTypeQuery;
            rightObjectTypeQuery = that.getObjectTypeQuery();
            if (this.objectTypeQuery!= null) {
                if (that.objectTypeQuery!= null) {
                    if (!leftObjectTypeQuery.equals(rightObjectTypeQuery)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.objectTypeQuery!= null) {
                    return false;
                }
            }
        }
        {
            ClassificationNodeQueryType leftStatusQuery;
            leftStatusQuery = this.getStatusQuery();
            ClassificationNodeQueryType rightStatusQuery;
            rightStatusQuery = that.getStatusQuery();
            if (this.statusQuery!= null) {
                if (that.statusQuery!= null) {
                    if (!leftStatusQuery.equals(rightStatusQuery)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.statusQuery!= null) {
                    return false;
                }
            }
        }
        {
            List<AssociationQueryType> leftSourceAssociationQuery;
            leftSourceAssociationQuery = (((this.sourceAssociationQuery!= null)&&(!this.sourceAssociationQuery.isEmpty()))?this.getSourceAssociationQuery():null);
            List<AssociationQueryType> rightSourceAssociationQuery;
            rightSourceAssociationQuery = (((that.sourceAssociationQuery!= null)&&(!that.sourceAssociationQuery.isEmpty()))?that.getSourceAssociationQuery():null);
            if ((this.sourceAssociationQuery!= null)&&(!this.sourceAssociationQuery.isEmpty())) {
                if ((that.sourceAssociationQuery!= null)&&(!that.sourceAssociationQuery.isEmpty())) {
                    if (!leftSourceAssociationQuery.equals(rightSourceAssociationQuery)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.sourceAssociationQuery!= null)&&(!that.sourceAssociationQuery.isEmpty())) {
                    return false;
                }
            }
        }
        {
            List<AssociationQueryType> leftTargetAssociationQuery;
            leftTargetAssociationQuery = (((this.targetAssociationQuery!= null)&&(!this.targetAssociationQuery.isEmpty()))?this.getTargetAssociationQuery():null);
            List<AssociationQueryType> rightTargetAssociationQuery;
            rightTargetAssociationQuery = (((that.targetAssociationQuery!= null)&&(!that.targetAssociationQuery.isEmpty()))?that.getTargetAssociationQuery():null);
            if ((this.targetAssociationQuery!= null)&&(!this.targetAssociationQuery.isEmpty())) {
                if ((that.targetAssociationQuery!= null)&&(!that.targetAssociationQuery.isEmpty())) {
                    if (!leftTargetAssociationQuery.equals(rightTargetAssociationQuery)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.targetAssociationQuery!= null)&&(!that.targetAssociationQuery.isEmpty())) {
                    return false;
                }
            }
        }
        return true;
    }

    @Override
    public int hashCode() {
        int currentHashCode = 1;
        currentHashCode = ((currentHashCode* 31)+ super.hashCode());
        {
            currentHashCode = (currentHashCode* 31);
            List<SlotBranchType> theSlotBranch;
            theSlotBranch = (((this.slotBranch!= null)&&(!this.slotBranch.isEmpty()))?this.getSlotBranch():null);
            if ((this.slotBranch!= null)&&(!this.slotBranch.isEmpty())) {
                currentHashCode += theSlotBranch.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            InternationalStringBranchType theNameBranch;
            theNameBranch = this.getNameBranch();
            if (this.nameBranch!= null) {
                currentHashCode += theNameBranch.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            InternationalStringBranchType theDescriptionBranch;
            theDescriptionBranch = this.getDescriptionBranch();
            if (this.descriptionBranch!= null) {
                currentHashCode += theDescriptionBranch.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            FilterType theVersionInfoFilter;
            theVersionInfoFilter = this.getVersionInfoFilter();
            if (this.versionInfoFilter!= null) {
                currentHashCode += theVersionInfoFilter.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            List<ClassificationQueryType> theClassificationQuery;
            theClassificationQuery = (((this.classificationQuery!= null)&&(!this.classificationQuery.isEmpty()))?this.getClassificationQuery():null);
            if ((this.classificationQuery!= null)&&(!this.classificationQuery.isEmpty())) {
                currentHashCode += theClassificationQuery.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            List<ExternalIdentifierQueryType> theExternalIdentifierQuery;
            theExternalIdentifierQuery = (((this.externalIdentifierQuery!= null)&&(!this.externalIdentifierQuery.isEmpty()))?this.getExternalIdentifierQuery():null);
            if ((this.externalIdentifierQuery!= null)&&(!this.externalIdentifierQuery.isEmpty())) {
                currentHashCode += theExternalIdentifierQuery.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            ClassificationNodeQueryType theObjectTypeQuery;
            theObjectTypeQuery = this.getObjectTypeQuery();
            if (this.objectTypeQuery!= null) {
                currentHashCode += theObjectTypeQuery.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            ClassificationNodeQueryType theStatusQuery;
            theStatusQuery = this.getStatusQuery();
            if (this.statusQuery!= null) {
                currentHashCode += theStatusQuery.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            List<AssociationQueryType> theSourceAssociationQuery;
            theSourceAssociationQuery = (((this.sourceAssociationQuery!= null)&&(!this.sourceAssociationQuery.isEmpty()))?this.getSourceAssociationQuery():null);
            if ((this.sourceAssociationQuery!= null)&&(!this.sourceAssociationQuery.isEmpty())) {
                currentHashCode += theSourceAssociationQuery.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            List<AssociationQueryType> theTargetAssociationQuery;
            theTargetAssociationQuery = (((this.targetAssociationQuery!= null)&&(!this.targetAssociationQuery.isEmpty()))?this.getTargetAssociationQuery():null);
            if ((this.targetAssociationQuery!= null)&&(!this.targetAssociationQuery.isEmpty())) {
                currentHashCode += theTargetAssociationQuery.hashCode();
            }
        }
        return currentHashCode;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
    }

}
